# Todo Application in Runa
# This example showcases Runa's advanced features in a simple but complete application.

# Enhanced Type System
Type TodoId is String
Type Priority is "low" OR "medium" OR "high"
Type Status is "pending" OR "in_progress" OR "completed" OR "cancelled"

Type Todo is Dictionary with:
    id as TodoId
    title as String
    description as Optional[String]
    priority as Priority
    status as Status
    created_at as String
    completed_at as Optional[String]
    tags as List[String]

Type TodoList is List[Todo]
Type Result[T] is Dictionary with:
    success as Boolean
    value as Optional[T]
    error as Optional[String]

# Functional Programming - Pure operations for managing todos
Process called "create_todo" that takes title and description and priority and tags returns Todo:
    Return Todo with:
        id as generate_id()
        title as title
        description as description
        priority as priority
        status as "pending"
        created_at as current_timestamp()
        completed_at as None
        tags as tags

Process called "update_todo" that takes todo and updates returns Todo:
    Return Todo with:
        id as todo["id"]
        title as (If updates contains key "title" Then updates["title"] Otherwise todo["title"])
        description as (If updates contains key "description" Then updates["description"] Otherwise todo["description"])
        priority as (If updates contains key "priority" Then updates["priority"] Otherwise todo["priority"])
        status as (If updates contains key "status" Then updates["status"] Otherwise todo["status"])
        created_at as todo["created_at"]
        completed_at as (
            If updates contains key "status" and updates["status"] is equal to "completed" Then
                current_timestamp()
            Otherwise 
                todo["completed_at"]
        )
        tags as (If updates contains key "tags" Then updates["tags"] Otherwise todo["tags"])

# Higher-order functions
Process called "find_todo_by_id" that takes todos and id returns Optional[Todo]:
    Let filtered be Filter over todos using Lambda todo: todo["id"] is equal to id
    If length of filtered is greater than 0:
        Return filtered at index 0
    Otherwise:
        Return None

Process called "find_todos_by_status" that takes todos and status returns TodoList:
    Return Filter over todos using Lambda todo: todo["status"] is equal to status

Process called "find_todos_by_priority" that takes todos and priority returns TodoList:
    Return Filter over todos using Lambda todo: todo["priority"] is equal to priority

Process called "find_todos_by_tag" that takes todos and tag returns TodoList:
    Return Filter over todos using Lambda todo: todo["tags"] contains tag

# Pipeline operator
Process called "get_high_priority_pending_todos" that takes todos returns TodoList:
    Return todos
        |> Filter using Lambda todo: todo["priority"] is equal to "high"
        |> Filter using Lambda todo: todo["status"] is equal to "pending"
        |> Sort using Lambda todo: todo["created_at"]

# Asynchronous Programming
Async Process called "save_todos" that takes todos returns Result[Boolean]:
    Try:
        await write_file with path as "todos.json" and content as json_stringify(todos)
        Return Result with:
            success as true
            value as true
            error as None
    Catch error:
        Return Result with:
            success as false
            value as None
            error as "Failed to save todos: " followed by error

Async Process called "load_todos" that takes returns Result[TodoList]:
    Try:
        If file_exists with path as "todos.json":
            Let content be await read_file with path as "todos.json"
            Let todos be json_parse(content) as TodoList
            Return Result with:
                success as true
                value as todos
                error as None
        Otherwise:
            Return Result with:
                success as true
                value as list containing
                error as None
    Catch error:
        Return Result with:
            success as false
            value as None
            error as "Failed to load todos: " followed by error

# Pattern Matching
Process called "format_todo" that takes todo returns String:
    # Pattern match on todo status and priority to format display string
    Match list containing todo["status"] and todo["priority"]:
        When list containing "completed" and _:
            Return "[‚úì] " followed by todo["title"] followed by " (Completed)"
            
        When list containing "in_progress" and "high":
            Return "[üîÑ] " followed by todo["title"] followed by " (High Priority, In Progress)"
            
        When list containing "in_progress" and priority:
            Return "[üîÑ] " followed by todo["title"] followed by " (In Progress)"
            
        When list containing "pending" and "high":
            Return "[‚ùó] " followed by todo["title"] followed by " (High Priority)"
            
        When list containing "pending" and "medium":
            Return "[!] " followed by todo["title"] followed by " (Medium Priority)"
            
        When list containing "pending" and "low":
            Return "[ ] " followed by todo["title"]
            
        When list containing "cancelled" and _:
            Return "[‚úó] " followed by todo["title"] followed by " (Cancelled)"
            
        When _:
            Return "[ ] " followed by todo["title"]

# Command parsing using pattern matching
Process called "process_command" that takes command and todos returns Result[TodoList]:
    Match command split by " " with limit 2:
        When list containing "add" and rest:
            # Parse the rest of the command for todo details
            Let parts be parse_add_command(rest)
            Match parts:
                When {"title": title, "priority": priority, "tags": tags}:
                    Let new_todo be create_todo with:
                        title as title
                        description as None
                        priority as priority
                        tags as tags
                    Return Result with:
                        success as true
                        value as todos with new_todo added
                        error as None
                When _:
                    Return Result with:
                        success as false
                        value as None
                        error as "Invalid add command format"
                        
        When list containing "complete" and id:
            Let todo be find_todo_by_id with todos as todos and id as id
            Match todo:
                When None:
                    Return Result with:
                        success as false
                        value as None
                        error as "Todo not found"
                When found_todo:
                    Let updated be update_todo with:
                        todo as found_todo
                        updates as dictionary with:
                            "status" as "completed"
                    Let new_todos be update_todos_list with:
                        todos as todos
                        old_todo as found_todo
                        new_todo as updated
                    Return Result with:
                        success as true
                        value as new_todos
                        error as None
                        
        When list containing "delete" and id:
            Let filtered be Filter over todos using Lambda todo: todo["id"] is not equal to id
            If length of filtered is not equal to length of todos:
                Return Result with:
                    success as true
                    value as filtered
                    error as None
            Otherwise:
                Return Result with:
                    success as false
                    value as None
                    error as "Todo not found"
                    
        When list containing "list" and filter_type:
            Match filter_type:
                When "all":
                    Return Result with:
                        success as true
                        value as todos
                        error as None
                When "pending":
                    Return Result with:
                        success as true
                        value as find_todos_by_status with todos as todos and status as "pending"
                        error as None
                When "completed":
                    Return Result with:
                        success as true
                        value as find_todos_by_status with todos as todos and status as "completed"
                        error as None
                When "high":
                    Return Result with:
                        success as true
                        value as find_todos_by_priority with todos as todos and priority as "high"
                        error as None
                When _:
                    # Check if it's a tag search
                    If filter_type starts with "tag:":
                        Let tag be filter_type substring from 4
                        Return Result with:
                            success as true
                            value as find_todos_by_tag with todos as todos and tag as tag
                            error as None
                    Otherwise:
                        Return Result with:
                            success as false
                            value as None
                            error as "Unknown filter type"
                        
        When list containing "help" and _:
            Display "Todo App Commands:"
            Display "  add <title> [priority:low|medium|high] [tags:tag1,tag2]"
            Display "  complete <id>"
            Display "  delete <id>"
            Display "  list [all|pending|completed|high|tag:tagname]"
            Display "  help"
            Display "  exit"
            Return Result with:
                success as true
                value as todos
                error as None
                
        When list containing "exit" and _:
            Return Result with:
                success as true
                value as None
                error as "EXIT"
                
        When _:
            Return Result with:
                success as false
                value as None
                error as "Unknown command"

# Helper function to update a todo in the list
Process called "update_todos_list" that takes todos and old_todo and new_todo returns TodoList:
    Return Map over todos using Lambda todo:
        If todo["id"] is equal to old_todo["id"]:
            Return new_todo
        Otherwise:
            Return todo

# Helper function to parse add command
Process called "parse_add_command" that takes command_str returns Dictionary:
    # Default values
    Let title be ""
    Let priority be "medium"
    Let tags be list containing
    
    # Extract title - everything before the first bracket or end of string
    Let title_end be (
        If command_str contains "[" Then 
            index of "[" in command_str
        Otherwise 
            length of command_str
    )
    Set title to command_str substring from 0 to title_end trimmed
    
    # Extract parameters
    Let params_str be command_str substring from title_end
    
    # Extract priority
    Let priority_match be regex_match(params_str, "\\[priority:(low|medium|high)\\]")
    If priority_match is not None:
        Set priority to priority_match group at index 1
    
    # Extract tags
    Let tags_match be regex_match(params_str, "\\[tags:([^\\]]+)\\]")
    If tags_match is not None:
        Let tags_str be tags_match group at index 1
        Set tags to tags_str split by ","
    
    Return dictionary with:
        "title" as title
        "priority" as priority
        "tags" as tags

# Helpers to generate IDs and timestamps
Process called "generate_id" that takes returns TodoId:
    Return random_string with length as 8

Process called "current_timestamp" that takes returns String:
    Return format_date(current_date(), "YYYY-MM-DD HH:mm:ss")

# Display todos with formatting
Process called "display_todos" that takes todos returns None:
    If length of todos is equal to 0:
        Display "No todos found."
        Return None
    
    For each todo in todos:
        Let formatted be format_todo with todo as todo
        Display formatted
        
        # Display description if available
        If todo["description"] is not None:
            Display "  " followed by todo["description"]
            
        # Display tags if any
        If length of todo["tags"] is greater than 0:
            Display "  Tags: " followed by join(todo["tags"], ", ")
            
        Display "" # Empty line for spacing

# Main application
Async Process called "main" that takes returns None:
    Display "Welcome to Todo App!"
    Display "Type 'help' for available commands."
    
    # Load existing todos
    Let load_result be await load_todos with
    Match load_result:
        When {"success": true, "value": loaded_todos}:
            Let todos be loaded_todos
            Display "Loaded " followed by length of todos followed by " todo(s)."
        When _:
            Display "Failed to load todos. Starting with empty list."
            Let todos be list containing
    
    # Main command loop
    While true:
        Let command be input with prompt as "> "
        Let result be process_command with command as command and todos as todos
        
        Match result:
            When {"success": true, "value": None, "error": "EXIT"}:
                # Exit command
                Break
                
            When {"success": true, "value": new_todos}:
                # Successful command that modified the todos
                Set todos to new_todos
                
                # Save todos
                Let save_result be await save_todos with todos as todos
                Match save_result:
                    When {"success": false, "error": error}:
                        Display "Warning: Failed to save todos - " followed by error
                    When _:
                        # Success, no need to do anything
                        Noop
                
                # Display todos after most commands
                If command starts with "list":
                    display_todos with todos as new_todos
                
            When {"success": false, "error": error}:
                # Command error
                Display "Error: " followed by error

    Display "Goodbye!"

# Start the application
When main is called:
    await main with 