# Example Test Suite for Runa
# Demonstrates usage of the unit testing framework

import runa.test.unit_test_framework as test
import runa.math

# -----------------------------------------------------
# Basic Arithmetic Test Suite
# -----------------------------------------------------

Let math_suite = test.create_test_suite("Arithmetic Tests", "Basic tests for math operations")

# Setup and teardown hooks
math_suite.before_all = function() {
    Print("Setting up arithmetic test suite...")
    # Setup code here (database connections, test data, etc.)
}

math_suite.after_all = function() {
    Print("Cleaning up arithmetic test suite...")
    # Cleanup code here
}

math_suite.before_each = function() {
    # Code to run before each test
    Print("Running a new test...")
}

math_suite.after_each = function() {
    # Code to run after each test
    Print("Test completed")
}

# Test cases
math_suite.add_test("Addition Test", function() {
    Let a = 5
    Let b = 7
    Let result = a + b
    
    test.assert_equal(result, 12, "5 + 7 should equal 12")
}, ["basic", "math"])

math_suite.add_test("Subtraction Test", function() {
    Let a = 10
    Let b = 3
    Let result = a - b
    
    test.assert_equal(result, 7, "10 - 3 should equal 7")
}, ["basic", "math"])

math_suite.add_test("Multiplication Test", function() {
    Let a = 4
    Let b = 5
    Let result = a * b
    
    test.assert_equal(result, 20, "4 * 5 should equal 20")
}, ["basic", "math"])

math_suite.add_test("Division Test", function() {
    Let a = 20
    Let b = 4
    Let result = a / b
    
    test.assert_equal(result, 5, "20 / 4 should equal 5")
}, ["basic", "math"])

# Intentional failure
math_suite.add_test("Failed Test Example", function() {
    Let a = 10
    Let b = 5
    Let wrong_result = a + b + 1  # Intentional error
    
    test.assert_equal(wrong_result, 15, "This test will fail")
}, ["failure-example"])

# Skip a test
math_suite.skip("Skipped Test", function() {
    # This test will be skipped
    test.assert_true(false, "This would fail if not skipped")
}, ["skipped"])

# Complex assertion examples
math_suite.add_test("Object Equality Test", function() {
    Let obj1 = {
        "name": "Test Object",
        "values": [1, 2, 3],
        "metadata": {
            "created": "today",
            "version": 1.0
        }
    }
    
    Let obj2 = {
        "name": "Test Object",
        "values": [1, 2, 3],
        "metadata": {
            "created": "today",
            "version": 1.0
        }
    }
    
    test.assert_deep_equal(obj1, obj2, "Objects should be deeply equal")
}, ["advanced"])

math_suite.add_test("Exception Test", function() {
    Let divide_by_zero = function() {
        Return 1 / 0
    }
    
    test.assert_throws(divide_by_zero, Error, "Dividing by zero should throw an error")
}, ["advanced", "error-handling"])

# -----------------------------------------------------
# String Manipulation Test Suite
# -----------------------------------------------------

Let string_suite = test.create_test_suite("String Tests", "Tests for string manipulation")

string_suite.add_test("String Concatenation", function() {
    Let str1 = "Hello"
    Let str2 = "World"
    Let result = str1 + " " + str2
    
    test.assert_equal(result, "Hello World")
}, ["string"])

string_suite.add_test("String Contains Test", function() {
    Let text = "The quick brown fox jumps over the lazy dog"
    
    test.assert_contains(text, "fox")
    test.assert_contains(text, "dog")
    test.assert_false(text.includes("cat"))
}, ["string"])

string_suite.add_test("String Pattern Matching", function() {
    Let email = "user@example.com"
    Let pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
    
    test.assert_match(email, pattern, "Should be a valid email format")
}, ["string", "regex"])

# Configure test suite options
string_suite.configure({
    "report_format": "json",
    "report_file": "./string_test_results.json",
    "verbose": true,
    "fail_fast": false
})

# -----------------------------------------------------
# Main Test Runner
# -----------------------------------------------------

Process called "run_tests":
    Print("\n=== Running Runa Test Suites ===\n")
    
    # Run math test suite
    Let math_results = math_suite.run()
    
    # Run string test suite
    Let string_results = string_suite.run()
    
    # Display overall status
    Let total_pass = math_results.passed + string_results.passed
    Let total_fail = math_results.failed + string_results.failed
    Let total_error = math_results.errors + string_results.errors
    Let total_skip = math_results.skipped + string_results.skipped
    
    Print("\n=== Overall Test Results ===")
    Print("Total Passed: " + total_pass)
    Print("Total Failed: " + total_fail)
    Print("Total Errors: " + total_error)
    Print("Total Skipped: " + total_skip)
    
    # Return exit code for CI/CD systems
    Return total_fail === 0 && total_error === 0

# Execute tests when this file is run directly
If __filename === process.mainModule.filename:
    run_tests() 