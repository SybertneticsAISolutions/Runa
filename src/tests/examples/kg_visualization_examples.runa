# Knowledge Graph Visualization Examples
# This file demonstrates different visualization techniques for knowledge graphs in Runa

import runa.ai.knowledge_graph
import runa.ai.visualization

# Example 1: Basic knowledge graph visualization
Process called "basic_visualization":
    # Connect to a knowledge graph
    Let kg = KnowledgeGraph.connect("research_data")
    
    # Create a basic visualizer
    Let viz = GraphVisualizer.create()
    
    # Render the graph
    Let visual = viz.render(kg)
    
    # Display the visualization
    visual.display()
    
    Return "Basic visualization displayed"

# Example 2: Custom visualization styling
Process called "styled_visualization":
    # Connect to a knowledge graph
    Let kg = KnowledgeGraph.connect("social_network")
    
    # Create a visualizer with custom styling
    Let viz = GraphVisualizer.create({
        "layout": "force_directed",
        "theme": "dark",
        "node_size_property": "followers_count",
        "node_color_property": "category",
        "edge_width_property": "interaction_strength",
        "edge_color_property": "relationship_type"
    })
    
    # Define a custom color palette
    viz.set_color_palette({
        "Person": "#3366cc",
        "Organization": "#dc3912",
        "Event": "#ff9900",
        "Location": "#109618"
    })
    
    # Render the graph
    Let visual = viz.render(kg)
    
    # Export as SVG
    visual.export("social_network_visualization.svg")
    
    Return "Styled visualization exported"

# Example 3: Interactive visualization with filtering
Process called "interactive_visualization":
    # Connect to a knowledge graph
    Let kg = KnowledgeGraph.connect("knowledge_base")
    
    # Create an interactive visualizer
    Let viz = GraphVisualizer.create({
        "interactive": true,
        "highlight_neighbors": true,
        "search_enabled": true,
        "filter_panel": true
    })
    
    # Render the graph
    Let visual = viz.render(kg)
    
    # Add event handlers
    visual.on_node_click(node => {
        Print("Selected: " + node.properties.name)
        Let details = kg.get_entity_details(node.id)
        UI.panel("details").update(details)
    })
    
    # Add interactive filters
    visual.add_filter("node_type", {
        "type": "multiselect",
        "options": kg.get_entity_types(),
        "default": "all"
    })
    
    visual.add_filter("relationship_type", {
        "type": "multiselect",
        "options": kg.get_relationship_types(),
        "default": "all"
    })
    
    # Display the interactive visualization
    visual.display({
        "container": "visualization-container",
        "width": "100%",
        "height": "600px"
    })
    
    Return "Interactive visualization rendered"

# Example 4: Visualizing graph analytics
Process called "analytics_visualization":
    # Connect to a knowledge graph
    Let kg = KnowledgeGraph.connect("citation_network")
    
    # Calculate graph metrics
    Let analytics = GraphAnalytics.create(kg)
    Let centrality = analytics.calculate_centrality("pagerank")
    Let communities = analytics.detect_communities("louvain")
    
    # Create a visualization with analytics data
    Let viz = GraphVisualizer.create({
        "node_size_property": "pagerank",
        "node_color_property": "community",
        "display_legend": true,
        "legend_title": "Research Communities"
    })
    
    # Enrich the graph with analytics results
    Let enriched_graph = kg.enrich({
        "pagerank": centrality.scores,
        "community": communities.assignments
    })
    
    # Render the enriched graph
    Let visual = viz.render(enriched_graph)
    
    # Add analytics information panel
    visual.add_info_panel({
        "title": "Graph Analytics",
        "metrics": [
            {"name": "Communities", "value": communities.count},
            {"name": "Modularity", "value": communities.modularity},
            {"name": "Top Influential Nodes", "value": centrality.top(5).map(n => n.name).join(", ")}
        ]
    })
    
    # Display the visualization
    visual.display()
    
    Return "Analytics visualization displayed"

# Example 5: Time-based visualization
Process called "temporal_visualization":
    # Connect to a knowledge graph with temporal data
    Let kg = KnowledgeGraph.connect("company_evolution")
    
    # Create a time-based visualizer
    Let viz = GraphVisualizer.create({
        "time_based": true,
        "time_property": "established_date",
        "time_interval": "years",
        "animation_speed": 1000,
        "show_timeline": true
    })
    
    # Define time range
    viz.set_time_range("2000-01-01", "2023-01-01")
    
    # Render the temporal visualization
    Let visual = viz.render(kg)
    
    # Add time controls
    visual.add_time_control({
        "type": "slider",
        "play_button": true,
        "speed_control": true
    })
    
    # Display the visualization
    visual.display()
    
    Return "Temporal visualization displayed"

# Example 6: Geographic knowledge graph visualization
Process called "geo_visualization":
    # Connect to a knowledge graph with geographic data
    Let kg = KnowledgeGraph.connect("global_supply_chain")
    
    # Create a geo-visualization
    Let viz = GraphVisualizer.create({
        "type": "geo",
        "map_style": "light",
        "lat_property": "latitude",
        "lng_property": "longitude",
        "region_property": "country",
        "value_property": "transaction_volume"
    })
    
    # Set map options
    viz.set_map_options({
        "initial_zoom": 2,
        "center": [0, 0],
        "legend": true,
        "legend_title": "Transaction Volume"
    })
    
    # Render the geo-visualization
    Let visual = viz.render(kg)
    
    # Add layers for different entity types
    visual.add_layer("Manufacturers", {
        "filter": entity => entity.type == "Manufacturer",
        "color": "#e41a1c",
        "visible": true
    })
    
    visual.add_layer("Distributors", {
        "filter": entity => entity.type == "Distributor",
        "color": "#377eb8",
        "visible": true
    })
    
    visual.add_layer("Retailers", {
        "filter": entity => entity.type == "Retailer",
        "color": "#4daf4a",
        "visible": true
    })
    
    # Display the visualization
    visual.display()
    
    Return "Geographic visualization displayed"

# Example 7: Creating a knowledge graph dashboard
Process called "create_dashboard":
    # Connect to a knowledge graph
    Let kg = KnowledgeGraph.connect("research_network")
    
    # Create dashboard
    Let dashboard = Dashboard.create("Knowledge Graph Insights")
    
    # Create multiple visualizations
    Let overview_viz = GraphVisualizer.create({
        "layout": "force_directed",
        "node_size_property": "publications",
        "node_color_property": "field"
    })
    
    Let community_viz = GraphVisualizer.create({
        "layout": "circular",
        "node_color_property": "community",
        "group_by": "community"
    })
    
    Let timeline_viz = GraphVisualizer.create({
        "type": "timeline",
        "time_property": "publication_date",
        "value_property": "citations",
        "group_by": "field"
    })
    
    # Add visualizations to dashboard
    dashboard.add_panel("Overview", overview_viz.render(kg))
    
    # Run community detection
    Let analytics = GraphAnalytics.create(kg)
    Let communities = analytics.detect_communities("louvain")
    Let enriched_graph = kg.enrich({"community": communities.assignments})
    dashboard.add_panel("Communities", community_viz.render(enriched_graph))
    
    # Add timeline visualization
    dashboard.add_panel("Publication Timeline", timeline_viz.render(kg))
    
    # Add metrics panel
    dashboard.add_metrics_panel("Key Metrics", [
        {"name": "Total Researchers", "value": kg.count_entities("Researcher")},
        {"name": "Total Publications", "value": kg.count_entities("Publication")},
        {"name": "Average Citations", "value": kg.average("Publication", "citations")},
        {"name": "Communities", "value": communities.count}
    ])
    
    # Configure dashboard layout
    dashboard.set_layout([
        ["Overview", "Communities"],
        ["Publication Timeline", "Key Metrics"]
    ])
    
    # Add global filter
    dashboard.add_filter("Time Range", {
        "type": "date_range",
        "default": ["2010-01-01", "2023-01-01"],
        "affects": ["Overview", "Communities", "Publication Timeline"]
    })
    
    # Display dashboard
    dashboard.display()
    
    Return "Dashboard created and displayed"

# Example 8: 3D Graph Visualization
Process called "visualization_3d":
    # Connect to a knowledge graph
    Let kg = KnowledgeGraph.connect("protein_interactions")
    
    # Create a 3D visualizer
    Let viz = GraphVisualizer.create({
        "dimensions": 3,
        "layout": "force_directed_3d",
        "node_geometry": "sphere",
        "edge_geometry": "tube",
        "camera_controls": true
    })
    
    # Set 3D-specific options
    viz.set_3d_options({
        "lighting": "standard",
        "background_color": "#000000",
        "node_material": "standard",
        "edge_material": "standard",
        "node_texture_property": "protein_family"
    })
    
    # Render the 3D visualization
    Let visual = viz.render(kg)
    
    # Enable physics simulation
    visual.enable_physics({
        "gravity": 0,
        "friction": 0.1,
        "spring_length": 100
    })
    
    # Display the 3D visualization
    visual.display()
    
    Return "3D visualization displayed" 