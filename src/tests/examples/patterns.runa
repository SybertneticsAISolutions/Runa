# Pattern matching example in Runa

# Define shapes with different properties
Let circle be dictionary with:
    "type" as "circle"
    "radius" as 5

Let rectangle be dictionary with:
    "type" as "rectangle"
    "width" as 10
    "height" as 6

Let triangle be dictionary with:
    "type" as "triangle"
    "a" as 3
    "b" as 4
    "c" as 5

# Function to calculate area using pattern matching
Process called "calculate_area" that takes shape:
    Match shape:
        When {"type": "circle", "radius": r}:
            Let area be 3.14159 multiplied by r multiplied by r
            Return area

        When {"type": "rectangle", "width": w, "height": h}:
            Return w multiplied by h

        When {"type": "triangle", "a": a, "b": b, "c": c}:
            # Heron's formula
            Let s be (a plus b plus c) divided by 2
            Let area be (s multiplied by (s minus a) multiplied by (s minus b) multiplied by (s minus c))
            Return area to the power of 0.5

        When _:
            Display "Unknown shape type"
            Return 0

# Calculate and display areas
Let circle_area be calculate_area with shape as circle
Display "Circle area:" with result as circle_area

Let rectangle_area be calculate_area with shape as rectangle
Display "Rectangle area:" with result as rectangle_area

Let triangle_area be calculate_area with shape as triangle
Display "Triangle area:" with result as triangle_area

# List pattern matching example
Let numbers be list containing 1, 2, 3, 4, 5

Process called "sum_first_two" that takes numbers:
    Match numbers:
        When [first, second, ...rest]:
            Let sum be first plus second
            Display "First two numbers sum:" with result as sum
            Display "Remaining numbers:" with list as rest
            Return sum

        When [single]:
            Display "Only one number in the list:" with number as single
            Return single

        When []:
            Display "Empty list"
            Return 0

sum_first_two with numbers as numbers

# Create a new list with one element
Let singleton be list containing 42
sum_first_two with numbers as singleton

# Create an empty list
Let empty be list containing
sum_first_two with numbers as empty