# Functional programming example in Runa

# Define some basic functions
Process called "double" that takes x:
    Return x multiplied by 2

Process called "increment" that takes x:
    Return x plus 1

Process called "square" that takes x:
    Return x multiplied by x

Process called "is_even" that takes x:
    Return x modulo 2 is equal to
 0

# Create a list of numbers
Let numbers be list containing 1, 2, 3, 4, 5

# Lambda expressions
Let add be Lambda a and b: a plus b
Let add_five be Lambda x: x plus 5

Display "Adding 2 and 3 using lambda:" with result as add with a as 2 and b as 3
Display "Adding 5 to 10 using lambda:" with result as add_five with x as 10

# Pipeline operator
Let result1 be 5 |> double |> square
Display "Pipeline result (5 -> double -> square):" with result as result1

# Function composition
Let double_then_square be compose square with double
Let increment_then_double_then_square be compose square with double with increment

Display "Composition result (double then square) of 5:" with result as double_then_square with 5
Display "Composition result (increment then double then square) of 5:" with result as increment_then_double_then_square with 5

# Partial application
Let add_ten be Partial add with a as 10
Display "Partial application result (add_ten):" with result as add_ten with b as 5

# Map, filter, reduce
Let doubled_numbers be Map numbers over double
Display "Mapped numbers (doubled):" with list as doubled_numbers

Let even_numbers be Filter numbers using is_even
Display "Filtered numbers (even only):" with list as even_numbers

Let sum_of_numbers be Reduce numbers using add
Display "Reduced numbers (sum):" with result as sum_of_numbers

Let product_of_numbers be Reduce numbers using Lambda a and b: a multiplied by b with initial 1
Display "Reduced numbers (product):" with result as product_of_numbers

# Combined functional operations
Let squared_even_numbers be numbers |>
    Filter using is_even |>
    Map over square

Display "Squared even numbers:" with list as squared_even_numbers

# Chained transformations with pipeline
Let pipeline_result be numbers |>
    Map over double |>
    Filter using is_even |>
    Reduce using add

Display "Pipeline result (doubled, filtered for even, summed):" with result as pipeline_result