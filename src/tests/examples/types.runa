# Type system example in Runa

# Type aliases
Type UserId is Integer
Type Username is String
Type UserRole is String
Type Temperature is Float

# Generic type definitions
Type Pair[T, U] is Dictionary[String, Any]

# Type predicates
Process called "is_positive" that takes num (Integer) returns (Boolean):
    Return num is greater than 0

Process called "is_admin" that takes role (UserRole) returns (Boolean):
    Return role is equal to "admin"

# Type annotations with primitive types
Let user_id (UserId) be 12345
Let username (Username) be "johndoe"
Let user_role (UserRole) be "admin"
Let temperature (Temperature) be 72.5

# Type-checked function
Process called "get_user_greeting" that takes name (String) and role (UserRole) returns (String):
    If is_admin with role as role:
        Return "Welcome, Admin " followed by name
    Otherwise:
        Return "Welcome, " followed by name

# Generic function with explicit types
Process [T] called "get_first" that takes items (List[T]) returns (T):
    If length of items is equal to 0:
        # Default value for empty list
        Let default (T) be None
        Return default

    Return items at index 0

# Using union types
Type NumberOrString is Union[Integer, String]

Process called "describe_value" that takes value (NumberOrString) returns (String):
    If value is instance of Integer:
        Return "This is a number: " followed by value
    Otherwise:
        Return "This is a string: " followed by value

# Lists with type annotations
Let numbers (List[Integer]) be list containing 1, 2, 3, 4, 5
Let names (List[String]) be list containing "Alice", "Bob", "Charlie"

# Dictionaries with type annotations
Let user_data (Dictionary[String, Any]) be dictionary with:
    "id" as user_id
    "name" as username
    "role" as user_role
    "settings" as dictionary with:
        "temperature" as temperature
        "dark_mode" as true

# Using the functions
Let greeting be get_user_greeting with name as username and role as user_role
Display greeting

Let first_number be get_first with items as numbers
Display "First number:" with value as first_number

Let first_name be get_first with items as names
Display "First name:" with value as first_name

# Complex nested type examples
Type UserProfile is Dictionary[String, Any]
Type UserDatabase is Dictionary[UserId, UserProfile]

Let users (UserDatabase) be dictionary with:
    1 as dictionary with:
        "name" as "Alice"
        "role" as "admin"
    2 as dictionary with:
        "name" as "Bob"
        "role" as "user"

# Function with complex return type
Process called "find_user_by_id" that takes db (UserDatabase) and id (UserId) returns (Union[UserProfile, None]):
    If db contains key id:
        Return db at index id
    Otherwise:
        Return None

Let alice be find_user_by_id with db as users and id as 1
Display "Found user:" with user as alice

# Function with function parameter
Process called "apply_to_numbers" that takes numbers (List[Integer]) and func ((Integer) -> Integer) returns (List[Integer]):
    Let results (List[Integer]) be list containing

    For each num in numbers:
        Let result be func with num
        Add result to results

    Return results

# Define a function to pass as parameter
Process called "double" that takes x (Integer) returns (Integer):
    Return x multiplied by 2

Let doubled_numbers be apply_to_numbers with numbers as numbers and func as double
Display "Doubled numbers:" with result as doubled_numbers