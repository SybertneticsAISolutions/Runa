# Asynchronous programming example in Runa

# Import asyncio utilities
Import module "asyncio"

# Simulated async HTTP request function
Async Process called "fetch_data" that takes url:
    # Simulate network delay
    await asyncio.sleep with seconds as 1

    # Return different responses based on URL
    If url contains "users":
        Return list containing dictionary with:
            "id" as 1
            "name" as "John Doe"
            "email" as "john@example.com"

    If url contains "posts":
        Return list containing dictionary with:
            "id" as 1
            "title" as "Hello World"
            "content" as "This is a sample post"

    Otherwise:
        Return dictionary with:
            "error" as "Not found"
            "status" as 404

# Process for fetching multiple resources in parallel
Async Process called "fetch_multiple" that takes urls:
    Let results be list containing

    # Process each URL concurrently
    Async For each url in urls:
        Let result be await fetch_data with url as url
        Add result to results

    Return results

# Main process that uses async functions
Process called "main":
    # Define URLs to fetch
    Let urls be list containing "https://api.example.com/users", "https://api.example.com/posts"

    # Fetch data asynchronously
    Let results be await fetch_multiple with urls as urls

    # Display results
    Display "Fetched" with count as length of results followed by "resources:"

    For each result in results:
        Display result

# Execute the main process
main