# Multi-Target Language Example
# This example can be compiled to either Python or JavaScript

# --- Common functionality ---

# Define a simple data structure
Let person be dictionary with:
    "name" as "Alice"
    "age" as 30
    "languages" as list containing "Python", "JavaScript", "Runa"
    "is_programmer" as true

# Function to format a greeting
Process called "format_greeting" that takes person:
    Let name be person at index "name"
    Let age be person at index "age"
    Return "Hello, " followed by name followed by "! You are " followed by age followed by " years old."

# Function to list languages
Process called "list_languages" that takes person:
    Let languages be person at index "languages"
    Let language_count be length of languages

    Let message be "You know " followed by language_count followed by " languages: "

    For each language in languages:
        Set message to message followed by language

        # Add comma if not the last language
        If language is not equal to languages at index (language_count minus 1):
            Set message to message followed by ", "

    Return message

# Function to check if someone is a programmer
Process called "check_programmer" that takes person:
    If person at index "is_programmer":
        Return person at index "name" followed by " is a programmer."
    Otherwise:
        Return person at index "name" followed by " is not a programmer."

# --- Main program ---

# Generate and display messages
Let greeting be format_greeting with person as person
Let languages_message be list_languages with person as person
Let programmer_status be check_programmer with person as person

Display greeting
Display languages_message
Display programmer_status

# --- Language-specific features ---

# This will compile to a list comprehension in Python and map in JavaScript
Let doubled_numbers be Map list containing 1, 2, 3, 4, 5 over Lambda x: x multiplied by 2
Display "Doubled numbers:" with list as doubled_numbers

# Create a simple data structure for calculation
Let numbers be list containing 10, 20, 30, 40, 50

# Calculate sum and average
Let sum be 0
For each num in numbers:
    Set sum to sum plus num

Let average be sum divided by length of numbers

Display "Sum:" with result as sum
Display "Average:" with result as average

# Factorial calculation
Process called "factorial" that takes n:
    If n is less than or equal to 1:
        Return 1
    Otherwise:
        Return n multiplied by factorial with n as (n minus 1)

Let fact5 be factorial with n as 5
Display "5! =" with result as fact5