# Runa Advanced Features Showcase
# This example demonstrates pattern matching, async/await, functional programming, and types

# --- Type System ---

# Type aliases
Type UserId is Integer
Type Username is String
Type UserRole is String
Type User is Dictionary[String, Any]
Type UserList is List[User]
Type UserFilter is (User) -> Boolean

# --- Data Setup ---

# Import asyncio for async operations
Import module "asyncio"
Import module "random"

# User database with type annotations
Let users (UserList) be list containing
    dictionary with:
        "id" as 1
        "name" as "Alice"
        "role" as "admin"
        "active" as true
        "points" as 150,
    dictionary with:
        "id" as 2
        "name" as "Bob"
        "role" as "user"
        "active" as true
        "points" as 75,
    dictionary with:
        "id" as 3
        "name" as "Charlie"
        "role" as "moderator"
        "active" as true
        "points" as 110,
    dictionary with:
        "id" as 4
        "name" as "Dave"
        "role" as "user"
        "active" as false
        "points" as 40

# --- Functional Programming ---

# Lambda expression for filtering
Let is_active be Lambda user: user["active"] is equal to true

# Filter active users
Let active_users be Filter users using is_active

# Function to get display name
Process called "get_display_name" that takes user (User) returns (String):
    Return user["name"] followed by " (" followed by user["role"] followed by ")"

# Map to get all display names
Let display_names be Map active_users over get_display_name

# Double the points of all users using the pipeline operator
Process called "double_points" that takes user (User) returns (User):
    Let new_user be dictionary with:
        "id" as user["id"]
        "name" as user["name"]
        "role" as user["role"]
        "active" as user["active"]
        "points" as user["points"] multiplied by 2
    Return new_user

Let users_with_double_points be Map users over double_points

# Function composition
Process called "add_ten_points" that takes user (User) returns (User):
    Let new_user be dictionary with:
        "id" as user["id"]
        "name" as user["name"]
        "role" as user["role"]
        "active" as user["active"]
        "points" as user["points"] plus 10
    Return new_user

Let double_then_add_ten be compose add_ten_points with double_points
Let user_with_modified_points be double_then_add_ten with 1

# Reduce function to calculate total points
Process called "sum_points" that takes total (Integer) and user (User) returns (Integer):
    Return total plus user["points"]

Let total_points be Reduce users using sum_points with initial 0
Let total_doubled_points be Reduce users_with_double_points using sum_points with initial 0

# --- Pattern Matching ---

# Categorize user by role and activity status
Process called "categorize_user" that takes user (User) returns (String):
    Match user:
        When {"role": "admin", "active": true}:
            Return "Active administrator"

        When {"role": "admin", "active": false}:
            Return "Inactive administrator"

        When {"role": "moderator", "active": true}:
            Return "Active moderator"

        When {"role": "moderator", "active": false}:
            Return "Inactive moderator"

        When {"role": "user", "active": true, "points": points} if points is greater than 100:
            Return "Active power user"

        When {"role": "user", "active": true}:
            Return "Active regular user"

        When {"role": "user", "active": false}:
            Return "Inactive user"

        When _:
            Return "Unknown user type"

# Apply categorization to all users
Let categories be Map users over categorize_user

# Pattern matching with list destructuring
Process called "analyze_user_list" that takes user_list (UserList) returns (String):
    Match user_list:
        When []:
            Return "Empty user list"

        When [single_user]:
            Return "List with one user: " followed by single_user["name"]

        When [first, second, ...rest]:
            Return "List with multiple users. First: " followed by first["name"] followed by ", Second: " followed by second["name"] followed by ", and " followed by length of rest followed by " more."

        When _:
            Return "Unknown list format"

Let list_analysis be analyze_user_list with user_list as users

# --- Asynchronous Programming ---

# Async function to simulate fetching user data
Async Process called "fetch_user" that takes user_id (UserId) returns (User):
    # Simulate network delay
    Let delay be random.uniform with a as 0.1 and b as 0.3
    await asyncio.sleep with seconds as delay

    # Find user by ID
    For each user in users:
        If user["id"] is equal to user_id:
            Return user

    # User not found
    Return dictionary with:
        "id" as 0
        "name" as "Unknown"
        "role" as "guest"
        "active" as false
        "points" as 0

# Run async operations in sequence
Async Process called "process_users_sequentially" that takes user_ids (List[UserId]) returns (UserList):
    Let result (UserList) be list containing

    For each user_id in user_ids:
        Let user be await fetch_user with user_id as user_id
        Add user to result

    Return result

# Run async operations in parallel
Async Process called "process_users_in_parallel" that takes user_ids (List[UserId]) returns (UserList):
    Let tasks be list containing

    For each user_id in user_ids:
        Let task be fetch_user with user_id as user_id
        Add task to tasks

    Let results be await asyncio.gather with tasks
    Return results

# Async for loop
Async Process called "check_active_users" that takes user_ids (List[UserId]) returns (Integer):
    Let active_count be 0

    Async For each user_id in user_ids:
        Let user be await fetch_user with user_id as user_id
        If user["active"] is equal to true:
            Set active_count to active_count plus 1

    Return active_count

# Function to run async code
Process called "run_async_operations" that takes:
    # User IDs to fetch
    Let user_ids be list containing 1, 2, 3, 4

    # Sequential processing
    Let seq_result be await process_users_sequentially with user_ids as user_ids
    Display "Sequential processing result:" with count as length of seq_result

    # Parallel processing
    Let parallel_result be await process_users_in_parallel with user_ids as user_ids
    Display "Parallel processing result:" with count as length of parallel_result

    # Check active users
    Let active_count be await check_active_users with user_ids as user_ids
    Display "Active users count:" with count as active_count

    Return "Async operations completed successfully"

# --- Combining Advanced Features ---

# Async function with pattern matching and typed parameters
Async Process called "get_user_info" that takes user_id (UserId) returns (String):
    Let user be await fetch_user with user_id as user_id

    # Use pattern matching to format user info
    Match user:
        When {"id": 0}:
            Return "User not found"

        When {"name": name, "role": "admin", "points": points}:
            Return "Admin " followed by name followed by " has " followed by points followed by " points"

        When {"name": name, "role": role, "points": points, "active": true}:
            Return "Active " followed by role followed by " " followed by name followed by " has " followed by points followed by " points"

        When {"name": name, "role": role, "points": points, "active": false}:
            Return "Inactive " followed by role followed by " " followed by name followed by " has " followed by points followed by " points"

        When _:
            Return "Unknown user format"

# Functional processing pipeline with async operation
Async Process called "process_user_pipeline" that takes user_id (UserId) returns (String):
    # Fetch user asynchronously
    Let user be await fetch_user with user_id as user_id

    # Process user through a pipeline using functional programming
    Let result be user |>
        double_points |>
        add_ten_points |>
        categorize_user

    Return result

# Execute combined example
Process called "run_combined_example" that takes:
    Let sample_user_id be 1

    # Get user info using async and pattern matching
    Let user_info be await get_user_info with user_id as sample_user_id
    Display "User info:" with result as user_info

    # Process user through pipeline with async
    Let pipeline_result be await process_user_pipeline with user_id as sample_user_id
    Display "Pipeline result:" with result as pipeline_result

    # Use functional programming to summarize all users
    Let summaries be Map users over Lambda user: dictionary with:
        "name" as user["name"]
        "category" as categorize_user with user as user
        "display" as get_display_name with user as user

    Return summaries

# --- Execute the showcase ---

# Display user information
Display "User display names:" with list as display_names
Display "Total points:" with points as total_points
Display "Total doubled points:" with points as total_doubled_points
Display "User categories:" with categories as categories
Display "User list analysis:" with analysis as list_analysis

# Run the async showcase
Let async_result be run_async_operations
Display "Async result:" with result as async_result

# Run the combined example
Let combined_result be run_combined_example
Display "Combined example result:" with result as combined_result