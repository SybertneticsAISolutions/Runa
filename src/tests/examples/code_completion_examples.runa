# Code Completion Examples
# This file contains examples of Runa code patterns that the code suggestion system targets

# Example 1: Function calls with parameters
Process called "example_sort" that takes arr:
    # The code suggestion system would offer parameter completions for these function calls
    Let sorted_arr be quick_sort(arr)
    Let reversed_arr be quick_sort(arr, reverse=True)
    Let partial_arr be quick_sort(arr, start=0, end=5)
    
    Return sorted_arr

# Example 2: Import statements
import runa.stdlib.math
import runa.stdlib.sorting
import runa.stdlib.collections
import runa.stdlib.io

# Example 3: Variable assignments
Process called "process_data" that takes data:
    # The code suggestion system would suggest value completions for these assignments
    Let count = data.size()
    Let average = data.average()
    Let max_value = data.max()
    Let min_value = data.min()
    
    Return {
        "count": count,
        "average": average,
        "max": max_value,
        "min": min_value
    }

# Example 4: Function parameters
# The code suggestion system would suggest parameter declarations like these
Process called "calculate_statistics" that takes data:List, options:Dict = None:
    Let count = data.size()
    Let sum = data.sum()
    Let average = sum / count
    
    # Use options if provided
    If options is not None:
        If options.contains("include_median"):
            Let median = data.median()
            Return {
                "count": count,
                "sum": sum,
                "average": average,
                "median": median
            }
    
    Return {
        "count": count,
        "sum": sum,
        "average": average
    }

# Example 5: Line completions
Process called "calculate_factorial" that takes n:
    # The code suggestion system would complete these lines
    If n <= 1:
        Return 1
    Else:
        Return n * calculate_factorial(n - 1)

# Example 6: Knowledge-enhanced function calls
Process called "fibonacci_sequence" that takes n:
    # Generate Fibonacci sequence up to n
    Let result be list containing
    
    If n <= 0:
        Return result
    
    Let a be 0
    Let b be 1
    
    Add a to result
    
    If n == 1:
        Return result
    
    Add b to result
    
    # The knowledge graph would help suggest the parameter for fibonacci()
    For i from 2 to n:
        Let next_value be fibonacci(i)
        Add next_value to result
    
    Return result

# Example 7: Context-aware completions
Process called "binary_search" that takes arr:List, target:
    Let left be 0
    Let right be arr.size() - 1
    
    While left <= right:
        Let mid be (left + right) / 2
        
        # The suggestion system would offer these completions based on context
        If arr[mid] == target:
            Return mid
        Else If arr[mid] < target:
            Set left to mid + 1
        Else:
            Set right to mid - 1
    
    Return -1  # Target not found 