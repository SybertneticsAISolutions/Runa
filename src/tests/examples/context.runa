# Context-Aware Interpretation Example
# This example demonstrates how context enhances code understanding

# --- Variable Disambiguation ---

# Define a variable x in the global scope
Let x be 10

# Create a local scope with a different x
Process called "process_data" that takes data:
    # This x is a different variable that shadows the global x
    Let x be "text"

    # The system uses context to determine which x to use
    Display "Local x:" with value as x    # Uses local x (string)

    # Access global x by full qualification
    Display "Global x:" with value as global.x    # Uses global x (number)

    # Return local x as the result
    Return x

# Call the function
Let result be process_data with data as 42

# Display the result (context indicates this is a string result)
Display "Result:" with message as result

# The global x is still available and unchanged
Display "Global x after function:" with value as x

# --- Function Disambiguation ---

# Define two functions with the same name but different parameter types
Process called "calculate" that takes a and b:
    # For numeric parameters
    Return a plus b

Process called "calculate" that takes text1 and text2:
    # For string parameters
    Return text1 followed by " " followed by text2

# The system uses context to determine which function to call
Let num_result be calculate with a as 5 and b as 10   # Calls numeric version
Let text_result be calculate with text1 as "Hello" and text2 as "World"  # Calls string version

Display "Numeric calculation:" with result as num_result
Display "Text calculation:" with result as text_result

# --- Syntax Disambiguation ---

# Let statement can be for variable declaration or collection iteration
Let items be list containing 1, 2, 3

# Context determines this is a collection iteration, not a declaration
Let total be 0
For each item in items:
    # Context knows we're in a loop and "item" is the loop variable
    Set total to total plus item

Display "Total:" with result as total

# --- Precedent-Based Learning ---

# Define a custom type
Type Temperature is Float

# The first time we use this pattern
Let room_temp be Temperature with celsius as 22.5

# Later, when we use a similar pattern, the system remembers the precedent
Let outdoor_temp be Temperature with celsius as 15.0

Display "Room temperature:" with temp as room_temp
Display "Outdoor temperature:" with temp as outdoor_temp

# --- Combined Context Example ---

# Define a data processing framework
Process called "process" that takes data and processor:
    # The system uses context to know this applies a function to data
    Return processor with input as data

# Define processors
Process called "double" that takes input:
    Return input multiplied by 2

Process called "square" that takes input:
    Return input multiplied by input

Process called "format" that takes input:
    Return "Result: " followed by input

# Use the framework with different processors
Let value be 5
Let doubled be process with data as value and processor as double
Let squared be process with data as value and processor as square
Let formatted be process with data as doubled and processor as format

Display formatted

# In a different context, "process" could mean something different
Process called "data_pipeline" that takes input:
    Let step1 be process with data as input and processor as double
    Let step2 be process with data as step1 and processor as square
    Let step3 be process with data as step2 and processor as format
    Return step3

Let final_result be data_pipeline with input as 3
Display final_result