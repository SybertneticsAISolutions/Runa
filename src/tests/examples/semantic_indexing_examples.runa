# Semantic Indexing Examples
# This file demonstrates how to use Runa's semantic indexing capabilities

import runa.ai.semantic_indexing
import runa.ai.knowledge_graph
import runa.ai.llm

# Example 1: Creating and using a basic semantic index
Process called "basic_semantic_indexing":
    # Create a semantic indexer
    Let indexer = SemanticIndexer.create({
        "embedding_model": "code-embedding-v1",
        "chunk_size": "function"
    })
    
    # Index a codebase
    Print("Indexing codebase...")
    Let index = indexer.index_codebase("./src/", {
        "file_extensions": [".runa"],
        "exclude_patterns": ["**/test/**", "**/examples/**"],
        "include_comments": true
    })
    
    # Save the index
    index.save("./semantic_index/basic_index")
    
    # Perform a semantic search
    Print("Searching for code related to 'file handling'...")
    Let results = index.search("file handling with error checks", {
        "limit": 5,
        "min_score": 0.6
    })
    
    # Display results
    Print("Search results:")
    For result in results:
        Print("-----------------------------------")
        Print("Score: " + result.score)
        Print("File: " + result.file)
        Print("Function: " + result.function_name)
        Print("Snippet: \n" + result.snippet)
    
    Return index

# Example 2: Analyzing code relationships
Process called "analyze_code_relationships":
    # Load an existing index or create a new one
    Let index = SemanticIndex.load("./semantic_index/basic_index")
    
    # Create code understanding engine
    Let understanding = CodeUnderstanding.create(index)
    
    # Extract function call graph
    Print("Extracting function relationships...")
    Let function_graph = understanding.extract_function_relationships({
        "include_calls": true,
        "include_inheritance": true
    })
    
    # Find related functions
    Print("Finding functions related to 'parse_input'...")
    Let related_functions = understanding.find_related_functions("parse_input", {
        "relationship_types": ["calls", "called_by", "similar_purpose"],
        "max_distance": 2
    })
    
    # Print related functions
    Print("Related functions:")
    For func in related_functions:
        Print("- " + func.name + " (" + func.relationship_type + ", " + 
              "similarity: " + func.similarity + ")")
    
    # Generate function summaries
    Print("Generating function summaries...")
    For func in related_functions.top(3):
        Let summary = understanding.summarize_function(func.name)
        Print("Summary of " + func.name + ":")
        Print(summary)
    
    Return function_graph

# Example 3: Integrating semantic search with documentation
Process called "integrate_code_and_docs":
    # Create indexers for code and documentation
    Let code_indexer = SemanticIndexer.create({
        "embedding_model": "code-embedding-v1",
        "chunk_size": "function"
    })
    
    Let doc_indexer = DocumentationIndexer.create({
        "embedding_model": "doc-embedding-v1",
        "chunk_size": "section"
    })
    
    # Index code and documentation
    Print("Indexing code and documentation...")
    Let code_index = code_indexer.index_codebase("./src/")
    Let doc_index = doc_indexer.index_documentation("./docs/")
    
    # Link code and documentation
    Print("Linking code and documentation...")
    Let linker = CodeDocLinker.create({
        "code_index": code_index,
        "doc_index": doc_index
    })
    
    Let linked_index = linker.link({
        "min_similarity": 0.7,
        "bidirectional": true
    })
    
    # Find documentation for a specific function
    Print("Finding documentation for 'process_transaction'...")
    Let function_docs = linked_index.find_documentation("process_transaction")
    
    Print("Documentation sections:")
    For doc in function_docs:
        Print("- " + doc.title + " (" + doc.file + ")")
        Print("  Relevance: " + doc.relevance)
        Print("  Excerpt: " + doc.excerpt)
    
    # Find code implementing a documented concept
    Print("Finding code implementing 'transaction rollback'...")
    Let concept_impl = linked_index.find_code_for_concept("transaction rollback")
    
    Print("Implementations:")
    For impl in concept_impl:
        Print("- " + impl.function_name + " in " + impl.file)
        Print("  Relevance: " + impl.relevance)
        Print("  Snippet: " + impl.snippet.truncate(100) + "...")
    
    Return linked_index

# Example 4: Incremental indexing and updates
Process called "incremental_indexing":
    # Load an existing index
    Let index = SemanticIndex.load("./semantic_index/basic_index")
    
    # Simulate changes to the codebase
    Print("Updating index with file changes...")
    
    # Track specific changes
    Let changes = index.update_from_changes({
        "added_files": ["./src/new_module.runa"],
        "modified_files": ["./src/fixed_function.runa"],
        "deleted_files": ["./src/deprecated.runa"]
    })
    
    Print("Index updated with:")
    Print("- Added entities: " + changes.added_count)
    Print("- Modified entities: " + changes.modified_count)
    Print("- Deleted entities: " + changes.deleted_count)
    
    # Alternatively, scan for changes automatically
    Print("Scanning for changes since last indexing...")
    Let auto_changes = index.update_from_filesystem("./src/", {
        "detect_changes": true,
        "use_git_history": true
    })
    
    Print("Auto-detected changes:")
    Print("- Added entities: " + auto_changes.added_count)
    Print("- Modified entities: " + auto_changes.modified_count)
    Print("- Deleted entities: " + auto_changes.deleted_count)
    
    # Save the updated index
    index.save("./semantic_index/updated_index")
    
    Return index

# Example 5: Intelligent code completion
Process called "semantic_code_completion":
    # Load a semantic index
    Let index = SemanticIndex.load("./semantic_index/updated_index")
    
    # Create a semantic autocomplete engine
    Let autocomplete = SemanticAutocomplete.create({
        "semantic_index": index,
        "context_window": 5,
        "suggestion_count": 5
    })
    
    # Get completions for a sample context
    Print("Getting completions for a code context...")
    
    Let file_context = """
Process called "process_user_data" that takes user_data:
    # Validate the input
    If not validate_user_input(user_data):
        Return Error("Invalid user data")
    
    # Process the data
    Let processed_data = """
    
    Let completions = autocomplete.suggest_from_text(file_context, {
        "file_type": "runa",
        "project_context": true
    })
    
    # Display completions
    Print("Semantic completions:")
    For completion in completions:
        Print("- " + completion.text + " (confidence: " + completion.confidence + ")")
        Print("  Type: " + completion.return_type)
        Print("  Source: " + completion.source)
    
    Return completions

# Example 6: Integrating with knowledge graphs
Process called "integrate_with_knowledge_graph":
    # Load a semantic index
    Let index = SemanticIndex.load("./semantic_index/updated_index")
    
    # Create a knowledge graph builder
    Let kg_builder = KnowledgeGraphBuilder.create({
        "semantic_index": index,
        "entity_types": ["function", "class", "module"],
        "relationship_types": ["calls", "inherits", "imports", "similar_to"]
    })
    
    # Build the knowledge graph
    Print("Building knowledge graph from semantic index...")
    Let kg = kg_builder.build_graph()
    
    # Visualize a subgraph around a specific function
    Print("Generating visualization for 'authenticate_user' function...")
    Let visualizer = GraphVisualizer.create({
        "layout": "force_directed",
        "node_size_property": "importance",
        "node_color_property": "type"
    })
    
    Let function_neighborhood = kg.get_neighborhood("authenticate_user", {
        "max_distance": 2,
        "include_similar": true
    })
    
    Let visual = visualizer.render(function_neighborhood)
    visual.save("authenticate_user_graph.svg")
    
    # Query the knowledge graph with semantic context
    Print("Querying knowledge graph with semantic context...")
    Let query_results = kg.query_with_semantics(
        "functions related to security and authentication",
        {"max_path_length": 3}
    )
    
    Print("Query results:")
    For node in query_results.nodes:
        Print("- " + node.name + " (" + node.type + ")")
        Print("  Relevance: " + node.relevance)
        If node.type == "function":
            Print("  Description: " + node.description)
    
    Return kg

# Example 7: Enhancing LLMs with semantic context
Process called "enhance_llm_with_semantics":
    # Load a semantic index
    Let index = SemanticIndex.load("./semantic_index/updated_index")
    
    # Connect LLM with semantic context
    Let semantic_llm = LLM.connect_with_context("runa_assistant_model", {
        "semantic_index": index,
        "retrieval_strategy": "hybrid",
        "max_context_items": 5
    })
    
    # Generate code with semantic awareness of the project
    Print("Generating code with semantic context...")
    Let code_request = "Create a function to handle user registration with proper error handling"
    
    Let generated_code = semantic_llm.generate_code_with_context(code_request, {
        "retrieve_similar_patterns": true,
        "follow_project_style": true
    })
    
    Print("Generated code:")
    Print(generated_code)
    
    # Ask a question about the codebase
    Print("Asking a question about the codebase...")
    Let question = "How does our error handling system work?"
    
    Let answer = semantic_llm.complete_with_context(question, {
        "project_context": true,
        "include_code_snippets": true
    })
    
    Print("Answer:")
    Print(answer)
    
    Return {
        "generated_code": generated_code,
        "answer": answer
    }

# Example 8: Complete semantic search system
Process called "create_semantic_search_system":
    # Initialize components
    Print("Creating semantic search system...")
    
    # Create indexers
    Let code_indexer = SemanticIndexer.create({
        "embedding_model": "code-embedding-v1",
        "chunk_size": "function"
    })
    
    Let doc_indexer = DocumentationIndexer.create({
        "embedding_model": "doc-embedding-v1",
        "chunk_size": "section"
    })
    
    # Index code and documentation
    Print("Indexing code and documentation...")
    Let code_index = code_indexer.index_codebase("./src/")
    Let doc_index = doc_indexer.index_documentation("./docs/")
    
    # Link code and documentation
    Print("Linking code and documentation...")
    Let linker = CodeDocLinker.create({
        "code_index": code_index,
        "doc_index": doc_index
    })
    
    Let linked_index = linker.link()
    
    # Create knowledge graph
    Print("Building knowledge graph...")
    Let kg_builder = KnowledgeGraphBuilder.create({
        "semantic_index": linked_index
    })
    
    Let kg = kg_builder.build_graph()
    
    # Create search API
    Print("Creating search API...")
    Let search_api = CodeSearchAPI.create({
        "semantic_index": linked_index,
        "knowledge_graph": kg
    })
    
    # Define search function
    Process called "search" that takes query:String, options:Dict = {}:
        Let default_options = {
            "limit": 10,
            "min_score": 0.6,
            "include_code": true,
            "include_docs": true,
            "include_graph": true
        }
        
        Let search_options = default_options.merge(options)
        Let results = search_api.search(query, search_options)
        
        Return {
            "query": query,
            "results_count": results.count,
            "top_results": results.top(5),
            "related_concepts": results.related_concepts,
            "suggested_queries": results.suggested_queries
        }
    
    # Test the search function
    Print("Testing search with sample query...")
    Let test_result = search("how to implement secure authentication")
    
    Print("Search returned " + test_result.results_count + " results")
    Print("Top result: " + test_result.top_results[0].title)
    Print("Related concepts: " + test_result.related_concepts.join(", "))
    
    # Save components
    Print("Saving system components...")
    linked_index.save("./semantic_system/linked_index")
    kg.save("./semantic_system/knowledge_graph")
    
    Return search 